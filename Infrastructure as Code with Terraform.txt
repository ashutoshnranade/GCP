######################################################################################
## Lab: Infrastructure as Code with Terraform #GSP750 ## 
######################################################################################

-------------------------------------------------------------------------------------
Terraform is the infrastructure as code offering from HashiCorp. It is a tool for building, changing, and managing infrastructure in a safe, repeatable way. Operators and Infrastructure teams can use Terraform to manage environments with a configuration language called the HashiCorp Configuration Language (HCL) for human-readable, automated deployments.

Infrastructure as code is the process of managing infrastructure in a file or files rather than manually configuring resources in a user interface. A resource in this instance is any piece of infrastructure in a given environment, such as a virtual machine, security group, network interface, etc. At a high level, Terraform allows operators to use HCL to author files containing definitions of their desired resources on almost any provider (AWS, Google Cloud, GitHub, Docker, etc.) and automates the creation of those resources at the time of apply.

A simple workflow for deployment will follow closely to the steps below:

Scope - Confirm what resources need to be created for a given project.
Author - Create the configuration file in HCL based on the scoped parameters.
Initialize - Run terraform init in the project directory with the configuration files. This will download the correct provider plug-ins for the project.
Plan & Apply - Run terraform plan to verify creation process and then terraform apply to create real resources as well as the state file that compares future changes in your configuration files to what actually exists in your deployment environment.


** What you'll learn
In this lab, you will learn how to perform the following tasks:

- Build, change, and destroy infrastructure with Terraform
- Create Resource Dependencies with Terraform
- Provision infrastructure with Terraform
-------------------------------------------------------------------------------------

gcloud auth list

gcloud config list project

====================== Task 1. Build infrastructure ======================

// Create the main.tf file:
touch main.tf

// Click the Open Editor button on the toolbar of Cloud Shell.

// In the Editor, add the following content to the main.tf file.
-------------------------------------------------------------------------------------
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.5.0"
    }
  }
}

provider "google" {

  project = "PROJECT ID"
  region  = "REGION"
  zone    = "ZONE"
}

resource "google_compute_network" "vpc_network" {
  name = "terraform-network"
}
-------------------------------------------------------------------------------------

terraform init

terraform apply

// The plan looks acceptable here, so type yes

// In the Console, from the Navigation menu, navigate to VPC network. You will see the terraform-network has been provisioned.

terraform show

====================== Task 2. Change infrastructure ======================

-------------------------------------------------------------------------------------
In the previous section, you created basic infrastructure with Terraform: a VPC network. In this section, you're going to modify your configuration, and see how Terraform handles change.

Infrastructure is continuously evolving, and Terraform was built to help manage and enact that change. As you change Terraform configurations, Terraform builds an execution plan that only modifies what is necessary to reach your desired state.

By using Terraform to change infrastructure, you can version control not only your configurations but also your state so you can see how the infrastructure evolves over time.
-------------------------------------------------------------------------------------

// In the Editor, add a compute instance resource to main.tf:
-------------------------------------------------------------------------------------
resource "google_compute_instance" "vm_instance" {
  name         = "terraform-instance"
  machine_type = "e2-micro"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = google_compute_network.vpc_network.name
    access_config {
    }
  }
}
-------------------------------------------------------------------------------------

terraform apply

// 'yes'

// Changing resources
// In addition to creating resources, Terraform can also make changes to those resources.

// Add a tags argument to your "vm_instance" so that it looks like this:
resource "google_compute_instance" "vm_instance" {
  name         = "terraform-instance"
  machine_type = "e2-micro"
  tags         = ["web", "dev"]
  # ...
}


terraform apply

// 'yes'

// Destructive changes
// Edit the boot_disk block inside the vm_instance resource in your configuration file and change it to the following:
  boot_disk {
    initialize_params {
      image = "cos-cloud/cos-stable"
    }
  }


terraform apply


// Destroy infrastructure
terraform destroy

"yes"


====================== Task 3. Create resource dependencies ======================

terraform apply

// Now add to your configuration by assigning a static IP to the VM instance in main.tf:

resource "google_compute_address" "vm_static_ip" {
  name = "terraform-static-ip"
}


terraform plan

// Update the network_interface configuration for your instance like so:

  network_interface {
    network = google_compute_network.vpc_network.self_link
    access_config {
      nat_ip = google_compute_address.vm_static_ip.address
    }
  }

// Run terraform plan again, but this time, save the plan:

terraform plan -out static_ip

// Run terraform apply "static_ip" to see how Terraform plans to apply this change:

terraform apply "static_ip"


// Implicit and explicit dependencies

// Add a Cloud Storage bucket and an instance with an explicit dependency on the bucket by adding the following to main.tf:

-------------------------------------------------------------------------------------
# New resource for the storage bucket our application will use.
resource "google_storage_bucket" "example_bucket" {
  name     = "<UNIQUE-BUCKET-NAME>"
  location = "US"

  website {
    main_page_suffix = "index.html"
    not_found_page   = "404.html"
  }
}

# Create a new instance that uses the bucket
resource "google_compute_instance" "another_instance" {
  # Tells Terraform that this VM instance must be created only after the
  # storage bucket has been created.
  depends_on = [google_storage_bucket.example_bucket]

  name         = "terraform-instance-2"
  machine_type = "e2-micro"

  boot_disk {
    initialize_params {
      image = "cos-cloud/cos-stable"
    }
  }

  network_interface {
    network = google_compute_network.vpc_network.self_link
    access_config {
    }
  }
}
-------------------------------------------------------------------------------------

terraform plan

terraform apply


====================== Task 4. Test your understanding ======================

-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------


######################################################################################
## Lab: Infrastructure as Code with Terraform #GSP750 ## 
######################################################################################
