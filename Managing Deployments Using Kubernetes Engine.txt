Dev Ops practices will regularly make use of multiple deployments to manage application deployment scenarios such as "Continuous deployment", "Blue-Green deployments", "Canary deployments" and more

Heterogeneous deployments typically involve connecting two or more distinct infrastructure environments or regions to address a specific technical or operational need. Heterogeneous deployments are called "hybrid", "multi-cloud", or "public-private", depending upon the specifics of the deployment.

For the purposes of this lab, heterogeneous deployments include those that span regions within a single cloud environment, multiple public cloud environments (multi-cloud), or a combination of on-premises and public cloud environments (hybrid or public-private).

Three common scenarios for heterogeneous deployment are multi-cloud deployments, fronting on-premises data, and continuous integration/continuous delivery (CI/CD) processes.

Lab: ------------------------------------------------------------------------------------

gcloud auth list

gcloud config list project

gcloud config set compute/zone us-central1-b

// Get the sample code for creating and running containers and deployments:
gsutil -m cp -r gs://spls/gsp053/orchestrate-with-kubernetes .
cd orchestrate-with-kubernetes/kubernetes

// Create a cluster with 3 nodes (this will take a few minutes to complete):
gcloud container clusters create bootcamp \
  --machine-type e2-small \
  --num-nodes 3 \
  --scopes "https://www.googleapis.com/auth/projecthosting,storage-rw"


//create your deployment object using kubectl create:
kubectl create -f deployments/auth.yaml

// Use the kubectl create command to create the auth service:
kubectl create -f services/auth.yaml


kubectl create -f deployments/hello.yaml
kubectl create -f services/hello.yaml

kubectl create secret generic tls-certs --from-file tls/
kubectl create configmap nginx-frontend-conf --from-file=nginx/frontend.conf
kubectl create -f deployments/frontend.yaml
kubectl create -f services/frontend.yaml

kubectl get services frontend

curl -ks https://34.72.128.224

// You can also use the output templating feature of kubectl to use curl as a one-liner:
curl -ks https://`kubectl get svc frontend -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"`

// Now that you have a deployment created, you can scale it. Do this by updating the spec.replicas field.
// You can look at an explanation of this field using the kubectl explain command again:
kubectl explain deployment.spec.replicas

kubectl scale deployment hello --replicas=5

kubectl get pods | grep hello- | wc -l

// scale back
kubectl scale deployment hello --replicas=3


// Trigger a rolling update
// To update your deployment, run the following command:

kubectl edit deployment hello

kubectl get replicaset

kubectl rollout history deployment/hello


