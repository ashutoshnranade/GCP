######################################################################################
## Create and Manage Cloud Resources: Challenge Lab # GSP313 ##
######################################################################################

-------------------------------------------------------------------------------------
Topics tested:

Create an instance
Create a 3-node Kubernetes cluster and run a simple service
Create an HTTP(s) load balancer in front of two web servers
-------------------------------------------------------------------------------------

gcloud auth list

gcloud config list project

====================== Task 1. Get the sample code ======================

-------------------------------------------------------------------------------------
Name the instance nucleus-jumphost-313.
Use an e2-micro machine type.
Use the default image type (Debian Linux).
-------------------------------------------------------------------------------------

gcloud compute instances create nucleus-jumphost-924 \
--zone=us-east1-b \
--machine-type=e2-micro \

====================== Task 2. Create a Kubernetes service cluster ======================

-------------------------------------------------------------------------------------
The team is building an application that will use a service running on Kubernetes. 
You need to:
Create a zonal cluster using us-east1-b.
Use the Docker container hello-app (gcr.io/google-samples/hello-app:2.0) as a placeholder; the team will replace the container with their own work later.
Expose the app on port 8080.
-------------------------------------------------------------------------------------

gcloud config set compute/zone us-east1-b

// Create cluster
gcloud container clusters create nucleus-jumphost-webserver1

// Authenticate with the cluster:
gcloud container clusters get-credentials nucleus-jumphost-webserver1

// To create a new Deployment hello-server from the hello-app container image, run the following kubectl create command:
kubectl create deployment hello-app --image=gcr.io/google-samples/hello-app:2.0

// To create a Kubernetes Service, which is a Kubernetes resource that lets you expose your application to external traffic, run the following kubectl expose command:
kubectl expose deployment hello-app --type=LoadBalancer --port 8083

// To inspect the hello-server Service, run kubectl get:
kubectl get service

// Wait till EXTERNAL-IP is not generated then check the progress
// WIthout this ig the progress does not reflect

====================== Task 3. Set up an HTTP load balancer ======================

-------------------------------------------------------------------------------------
You will serve the site via nginx web servers, but you want to ensure that the environment is fault-tolerant. Create an HTTP load balancer with a managed instance group of 2 nginx web servers. Use the following code to configure the web servers; the team will replace this with their own configuration later.
-------------------------------------------------------------------------------------

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF


-------------------------------------------------------------------------------------
Create an instance template.
Create a target pool.
Create a managed instance group.
Create a firewall rule named as allow-tcp-rule-474 to allow traffic (80/tcp).
Create a health check.
Create a backend service, and attach the managed instance group with named port (http:80).
Create a URL map, and target the HTTP proxy to route requests to your URL map.
Create a forwarding rule.
-------------------------------------------------------------------------------------

gcloud compute instance-templates create nginx-template \
          --metadata-from-file startup-script=startup.sh \
          --network nucleus-vpc \
          --machine-type g1-small \
          --region us-east1

gcloud config set compute/region us-east1
gcloud compute target-pools create nginx-pool


gcloud compute instance-groups managed create \
        nginx-group --zone=us-east1-b \
        --template=nginx-template --size=2

gcloud compute instances list


gcloud compute firewall-rules create allow-tcp-rule-474 \
          --allow tcp:80 \
          --network nucleus-vpc


gcloud compute http-health-checks create http-basic-checkgcloud 


gcloud compute backend-services create nginx-backend \
--protocol HTTP --http-health-checks http-basic-checkgcloud --global

gcloud compute backend-services add-backend nginx-backend \
--instance-group nginx-group \
--instance-group-zone us-east1-b \
--global


gcloud compute url-maps create web-map \
--default-service nginx-backend 

gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-map

gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy http-lb-proxy --ports 80

gcloud compute forwarding-rules list

// The lab instruction says Create a backend service, and attach the managed instance group with named port (http:80)
// Find the Managed Group "nginx-group" --> Edit --> Port Mapping --> Port Name = http, port Number = 80 -> Save

######################################################################################
## Create and Manage Cloud Resources: Challenge Lab # GSP313 ##
######################################################################################
