######################################################################################
## Set Up and Configure a Cloud Environment in Google Cloud: Challenge Lab # GSP321 ##
######################################################################################

Instructions:

Create all resources in the us-east1 region and us-east1-b zone, unless otherwise directed.

Use the project VPCs.


====================== Task 1. Create development VPC manually ======================

//// Create a VPC called griffin-dev-vpc with the following subnets only: ////
//// griffin-dev-wp 
//// IP address block: 192.168.16.0/20

gcloud compute networks create griffin-dev-vpc --subnet-mode custom

gcloud compute networks subnets create griffin-dev-wp --network=griffin-dev-vpc --region us-east1 --range=192.168.16.0/20


//// griffin-dev-mgmt
//// IP address block: 192.168.32.0/20

gcloud compute networks subnets create griffin-dev-mgmt --network=griffin-dev-vpc --region us-east1 --range=192.168.32.0/20

====================== TASK 2: Create production VPC manually ======================

//// * Create a VPC called griffin-prod-vpc with the following subnets only:  ////

//// * griffin-prod-wp
////   IP address block: 192.168.48.0/20
//// * griffin-prod-mgmt
////   IP address block: 192.168.64.0/20

gsutil cp -r gs://cloud-training/gsp321/dm ~/

//// * Now we have to edit prod-network.yaml configuration file.

cd dm
edit prod-network.yaml

////// or => sed -i s/SET_REGION/us-east1/g prod-network.yaml
////// * Replace SET_REGION to us-east1-b zone in the editor, and save the changes.

////// * Now you have to create the production VPC network with the configuration files: ////
//////   prod-network.jinja contains the subnet details with i/ps ////
gcloud deployment-manager deployments create griffin-prod --config prod-network.yaml
cd ..

====================== TASK 3: Create bastion host ======================

//// * Create a bastion host with two network interfaces, ////
////   one connected to griffin-dev-mgmt and the other connected to griffin-prod-mgmt. ////
////   Make sure you can SSH to the host. ////

gcloud compute instances create griffin-dev-db --network-interface=network=griffin-dev-vpc,subnet=griffin-dev-mgmt --network-interface=network=griffin-prod-vpc,subnet=griffin-prod-mgmt --tags=bastion --zone=us-east1-b


//// Firewall creation - Dev

gcloud compute firewall-rules create allow-bastion-dev-ssh --direction=INGRESS --priority=1000 --network=griffin-dev-vpc --action=ALLOW --rules=tcp:22 --source-ranges=192.168.32.0/20 --target-tags=bastian


//// Firewall creation - Prod

gcloud compute firewall-rules create allow-bastion-prod-ssh --direction=INGRESS --priority=1000 --network=griffin-prod-vpc --action=ALLOW --rules=tcp:22 --source-ranges=192.168.32.0/20 --target-tags=bastion


====================== TASK 4: Create and configure Cloud SQL Instance ======================

gcloud sql instances create griffin-dev-db --root-password password --region=us-east1

gcloud sql connect griffin-dev-db --user=root --quiet
// when prompted enter password as paaword

---------------------------------------------------------------------------------------
CREATE DATABASE wordpress;
CREATE USER "wp_user"@"%" IDENTIFIED BY "stormwind_rules";
GRANT ALL PRIVILEGES ON wordpress.* TO "wp_user"@"%";
FLUSH PRIVILEGES;
----------------------------------------------------------------------------------------

exit


====================== TASK 5: Create Kubernetes cluster ======================

//// * Create a 2 node cluster (e2-standard-4) called griffin-dev, in the griffin-dev-wp subnet, and in zone us-east1-b.


gcloud container clusters create griffin-dev \
 --network griffin-dev-vpc \
 --subnetwork griffin-dev-wp \
 --machine-type n1-standard-4 \
 --num-nodes 2 \
 --zone us-east1-b

gcloud container clusters get-credentials griffin-dev --zone us-east1-b


====================== TASK 6: Prepare the Kubernetes cluster ======================

//// 1. Use Cloud Shell and copy all files from gs://cloud-training/gsp321/wp-k8s.
//// The WordPress server needs to access the MySQL database using the username and password you created in task 4.
//// 2. You do this by setting the values as secrets. WordPress also needs to store its working files outside the container, so you need to create a volume.
//// 3. Add the following secrets and volume to the cluster using wp-env.yaml.
//// 4. Make sure you configure the username to wp_user and password to stormwind_rules before creating the 
//// configuration.
//// You also need to provide a key for a service account that was already set up. This service account provides ////access to the database for a sidecar container.
//// Use the command below to create the key, and then add the key to the Kubernetes environment:


cd ~/

gsutil cp -r gs://cloud-training/gsp321/wp-k8s .
-------------------------------------------------------------------------
 
sed -i s/username_goes_here/wp_user/g wp-env.yaml

sed -i s/password_goes_here/stormwind_rules/g wp-env.yaml

// verify with nano command if this is updated properly

cd wp-k8s/

kubectl create -f wp-env.yaml

gcloud iam service-accounts keys create key.json \
    --iam-account=cloud-sql-proxy@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com
kubectl create secret generic cloudsql-instance-credentials \
    --from-file key.json


kubectl create secret generic cloudsql-instance-credentials --from-file key.json



====================== Task 7. Create a WordPress deployment ======================

// In the Cloud, Shell open the WordPress deployment YAML file.
cd ~/wp-k8s
nano wp-deployment.yaml

// Replace YOUR_SQL_INSTANCE with griffin-dev-dbâ€™s Instance connection name.

// Now run Deployment and service file in Cloud Shell. 
kubectl create -f wp-deployment.yaml

kubectl create -f wp-service.yaml

====================== TASK 8: Enable monitoring ======================

// Navigation Menu -> Kubernetes Engine -> Services and Ingress -> Copy Endpoint's address.
// eg. 34.75.2.207

// Navigation Menu -> Monitoring -> Uptime Checks -> + CREATE UPTIME CHECK 
// Check Type -HTTP
// Resource Type -URL
// Hostname- YOUR-WORDPRESS_ENDPOINT
// Path- /
// Continue 3 times
// Title : Wordpress Uptime 
// Click on Test and Save after that


====================== TASK 9: Provide access for an additional engineer ======================

// In the GCP Console go to Navigation Menu > IAM & Admin > IAM.
// Click +Grant Access.
// Copy and paste the second user account for the lab to the New members field.
// Add Principals = second user account 
// Role = select Project > Editor.
// Click Save.


######################################################################################
## Set Up and Configure a Cloud Environment in Google Cloud: Challenge Lab # GSP321 ##
######################################################################################
