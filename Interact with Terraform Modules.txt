######################################################################################
## Lab: Interact with Terraform Modules #GSP751 ##
######################################################################################

-------------------------------------------------------------------------------------
// In this lab, you will learn how to perform the following tasks:

// Use a module from the Registry
// Build a module
-------------------------------------------------------------------------------------

gcloud auth list

gcloud config list project

====================== Task 1. Use modules from the Registry ======================

//Create a Terraform configuration
// To start, run the following commands in Cloud Shell 
// to clone the example simple project from the Google Terraform modules GitHub repository and switch to the v6.0.1 branch:

git clone https://github.com/terraform-google-modules/terraform-google-network
cd terraform-google-network
git checkout tags/v6.0.1 -b v6.0.1

gcloud config list --format 'value(core.project)'

// In the Editor, still in the same directory, navigate to variables.tf.

// Fill in the variable project_id with the output of the previous command. 
// You must follow the format below and set the default value for the variable:

variable "project_id" {
  description = "The project ID to host the network in"
  default     = "qwiklabs-gcp-00-a525a4408da7"
}


// In variables.tf, add in the variable network_name. 
// You can use the name example-vpc or any other name you'd like. 
// You must follow the format below and set the default value for the variable:

variable "network_name" {
  description = "The name of the VPC network being created"
  default     = "example-vpc"
}

// Back in the main.tf file, 
// update the network_name parameter to use the variable you just defined by setting the value to var.network_name.


module "test-vpc-module" {
  ...
  project_id   = var.project_id
  network_name = var.network_name
  ...


// In the main.tf file, update the subnet regions on lines 35, 40, and 47 from us-west1 to us-east1. 
// This will ensure that the subnets are created in your project's allowed region. 
// Your module should resemble the following:

  subnets = [
    {
      subnet_name   = "subnet-01"
      subnet_ip     = "10.10.10.0/24"
      subnet_region = "us-east1"
    },
    {
      subnet_name           = "subnet-02"
      subnet_ip             = "10.10.20.0/24"
      subnet_region         = "us-east1"
      subnet_private_access = "true"
      subnet_flow_logs      = "true"
    },
    {
      subnet_name               = "subnet-03"
      subnet_ip                 = "10.10.30.0/24"
      subnet_region             = "us-east1"
      ...
      ..
    }


// Provision infrastructure
// In Cloud Shell, navigate to your simple_project directory:

cd ~/terraform-google-network/examples/simple_project

// Initialize your Terraform configuration:

terraform init

// Create your VPC:

terraform apply

// To apply the changes and continue, respond to the prompt with "yes"


// Clean up your infrastructure
// Now you have seen how to use modules from the Terraform Registry, 
// how to configure those modules with input variables, 
// and how to get output values from those modules.

// Destroy the infrastructure you created:

terraform destroy

// Respond to the prompt with yes. Terraform will destroy the infrastructure you created.

// Once you've destroyed your resourced, delete the terraform-google-network folder.

cd ~
rm -rd terraform-google-network -f

====================== Task 2. Build a module ======================

-------------------------------------------------------------------------------------
// In the last task, you used a module from the Terraform Registry to create a VPC network in Google Cloud. 
// Although using existing Terraform modules correctly is an important skill, every Terraform practitioner will also benefit from learning how to create modules. 
// We recommend that you create every Terraform configuration with the assumption that it may be used as a module, because this will help you design your configurations to be flexible, reusable, and composable.

// As you may already know, Terraform treats every configuration as a module. 
// When you run terraform commands, or use Terraform Cloud or Terraform Enterprise to remotely run Terraform, the target directory containing Terraform configuration is treated as the root module.

// In this task, you create a module to manage Compute Storage buckets used to host static websites.
-------------------------------------------------------------------------------------

// Create a module

// Navigate to your home directory and create your root module by constructing a new main.tf configuration file. 
// Then create a directory called modules that contains another folder called gcs-static-website-bucket. 
// You will work with three Terraform configuration files inside the gcs-static-website-bucket directory: website.tf, variables.tf, and outputs.tf.

cd ~
touch main.tf
mkdir -p modules/gcs-static-website-bucket

// Navigate to the module directory and run the following commands to create three empty files:

cd modules/gcs-static-website-bucket
touch website.tf variables.tf outputs.tf

// Inside the gcs-static-website-bucket directory, run the following command to create a file called README.md with the following content:

tee -a README.md <<EOF
# GCS static website bucket

This module provisions Cloud Storage buckets configured for static website hosting.
EOF


// Create another file called LICENSE with the following content:

tee -a LICENSE <<EOF
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
EOF


// Add this Cloud Storage bucket resource to your website.tf file inside the modules/gcs-static-website-bucket directory:

-------------------------------------------------------------------------------------

resource "google_storage_bucket" "bucket" {
  name               = var.name
  project            = var.project_id
  location           = var.location
  storage_class      = var.storage_class
  labels             = var.labels
  force_destroy      = var.force_destroy
  uniform_bucket_level_access = true

  versioning {
    enabled = var.versioning
  }

  dynamic "retention_policy" {
    for_each = var.retention_policy == null ? [] : [var.retention_policy]
    content {
      is_locked        = var.retention_policy.is_locked
      retention_period = var.retention_policy.retention_period
    }
  }

  dynamic "encryption" {
    for_each = var.encryption == null ? [] : [var.encryption]
    content {
      default_kms_key_name = var.encryption.default_kms_key_name
    }
  }

  dynamic "lifecycle_rule" {
    for_each = var.lifecycle_rules
    content {
      action {
        type          = lifecycle_rule.value.action.type
        storage_class = lookup(lifecycle_rule.value.action, "storage_class", null)
      }
      condition {
        age                   = lookup(lifecycle_rule.value.condition, "age", null)
        created_before        = lookup(lifecycle_rule.value.condition, "created_before", null)
        with_state            = lookup(lifecycle_rule.value.condition, "with_state", null)
        matches_storage_class = lookup(lifecycle_rule.value.condition, "matches_storage_class", null)
        num_newer_versions    = lookup(lifecycle_rule.value.condition, "num_newer_versions", null)
      }
    }
  }
}
-------------------------------------------------------------------------------------


// Navigate to the variables.tf file in your module and add the following code:

-------------------------------------------------------------------------------------

variable "name" {
  description = "The name of the bucket."
  type        = string
}

variable "project_id" {
  description = "The ID of the project to create the bucket in."
  type        = string
}

variable "location" {
  description = "The location of the bucket."
  type        = string
}

variable "storage_class" {
  description = "The Storage Class of the new bucket."
  type        = string
  default     = null
}

variable "labels" {
  description = "A set of key/value label pairs to assign to the bucket."
  type        = map(string)
  default     = null
}


variable "bucket_policy_only" {
  description = "Enables Bucket Policy Only access to a bucket."
  type        = bool
  default     = true
}

variable "versioning" {
  description = "While set to true, versioning is fully enabled for this bucket."
  type        = bool
  default     = true
}

variable "force_destroy" {
  description = "When deleting a bucket, this boolean option will delete all contained objects. If false, Terraform will fail to delete buckets which contain objects."
  type        = bool
  default     = true
}

variable "iam_members" {
  description = "The list of IAM members to grant permissions on the bucket."
  type = list(object({
    role   = string
    member = string
  }))
  default = []
}

variable "retention_policy" {
  description = "Configuration of the bucket's data retention policy for how long objects in the bucket should be retained."
  type = object({
    is_locked        = bool
    retention_period = number
  })
  default = null
}

variable "encryption" {
  description = "A Cloud KMS key that will be used to encrypt objects inserted into this bucket"
  type = object({
    default_kms_key_name = string
  })
  default = null
}

variable "lifecycle_rules" {
  description = "The bucket's Lifecycle Rules configuration."
  type = list(object({
    # Object with keys:
    # - type - The type of the action of this Lifecycle Rule. Supported values: Delete and SetStorageClass.
    # - storage_class - (Required if action type is SetStorageClass) The target Storage Class of objects affected by this Lifecycle Rule.
    action = any

    # Object with keys:
    # - age - (Optional) Minimum age of an object in days to satisfy this condition.
    # - created_before - (Optional) Creation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.
    # - with_state - (Optional) Match to live and/or archived objects. Supported values include: "LIVE", "ARCHIVED", "ANY".
    # - matches_storage_class - (Optional) Storage Class of objects to satisfy this condition. Supported values include: MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, STANDARD, DURABLE_REDUCED_AVAILABILITY.
    # - num_newer_versions - (Optional) Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition.
    condition = any
  }))
  default = []
}
-------------------------------------------------------------------------------------


// Add an output to your module in the outputs.tf file inside your module:

output "bucket" {
  description = "The created storage bucket"
  value       = google_storage_bucket.bucket
}


// Return to the main.tf in your root directory and add a reference to the new module:

-------------------------------------------------------------------------------------
module "gcs-static-website-bucket" {
  source = "./modules/gcs-static-website-bucket"

  name       = var.name
  project_id = var.project_id
  location   = "us-east1"

  lifecycle_rules = [{
    action = {
      type = "Delete"
    }
    condition = {
      age        = 365
      with_state = "ANY"
    }
  }]
}
-------------------------------------------------------------------------------------


// In your root directory, create an outputs.tf file for your root module:
cd ~
touch outputs.tf

// Add the following code in the outputs.tf file:

output "bucket-name" {
  description = "Bucket names."
  value       = "module.gcs-static-website-bucket.bucket"
}


// In your root directory, create a variables.tf file:
touch variables.tf


// Add the following code to the variables.tf file. Set the variables project_id and name to default to your Project ID: qwiklabs-gcp-00-a525a4408da7.

variable "project_id" {
  description = "The ID of the project in which to provision resources."
  type        = string
  default     = "qwiklabs-gcp-00-a525a4408da7"

}

variable "name" {
  description = "Name of the buckets to create."
  type        = string
  default     = "qwiklabs-gcp-00-a525a4408da7"
}



// Whenever you add a new module to a configuration, Terraform must install the module before it can be used. 
// Both the terraform get and terraform init commands will install and update modules. 
// The terraform init command will also initialize backends and install plugins.


terraform init
terraform apply

// yes

// Download the sample contents to your home directory:
cd ~
curl https://raw.githubusercontent.com/hashicorp/learn-terraform-modules/master/modules/aws-s3-static-website-bucket/www/index.html > index.html
curl https://raw.githubusercontent.com/hashicorp/learn-terraform-modules/blob/master/modules/aws-s3-static-website-bucket/www/error.html > error.html

// Copy the files over to the bucket, replacing YOUR-BUCKET-NAME with the name of your storage bucket:
gsutil cp *.html gs://qwiklabs-gcp-00-a525a4408da7

//In a new tab in your browser, go to the website https://storage.cloud.google.com/YOUR-BUCKET-NAME/index.html, replacing YOUR-BUCKET-NAME with the name of your storage bucket.

https://storage.cloud.google.com/qwiklabs-gcp-00-a525a4408da7/index.html


//Destroy your Terraform resources:
terraform destroy

######################################################################################
## Lab: Interact with Terraform Modules #GSP751 ##
######################################################################################
